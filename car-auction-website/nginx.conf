# nginx.conf
# Configuration for Nginx to serve static files and proxy API requests to the Node.js backend

# Define the user and group under which the server will run.
user nginx;

# Define the number of worker processes.
worker_processes auto;

# Define error log path
error_log /var/log/nginx/error.log warn;

# Define the maximum number of open files.
worker_rlimit_nofile 8192;

events {
    # The maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 1024;
}

http {
    # Define the MIME types of the files.
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Define the log format.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # Define the access log path.
    access_log /var/log/nginx/access.log main;

    # Sendfile directive is used to transfer files.
    sendfile on;

    # TCP_nopush directive is used to send the HTTP response headers in one packet.
    tcp_nopush on;

    # TCP_nodelay directive is used to disable the Nagle buffering algorithm.
    tcp_nodelay on;

    # Keepalive_timeout directive is the timeout for keep-alive connections with the client.
    keepalive_timeout 65;

    # Gzip Compression
    gzip on;
    gzip_disable "msie6";

    # Virtual Host Configurations
    server {
        # Listen on port 80 (http)
        listen 80;

        # Define the root directory for static files
        root /var/www/html;

        # Define the server name (domain)
        server_name _;

        # Location for static files
        location / {
            try_files $uri $uri/ =404;
        }

        # Proxying the API requests to the Node.js backend
        location /api {
            proxy_pass http://localhost:3000; # Assuming the Node.js server runs on port 3000
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }